from itertools import takewhile
from typing import List, Optional

from pydantic import BaseModel, Field

from tailor.internal.domain.run import RunModel


class Run(BaseModel):
    state: str = Field(None, title="state of the singletask run")
    ended_utc: Optional[str] = Field(None, title="timestamp of when the workflow "
                                                 "ended, in ISO-8601 datetime format")
    traceback: Optional[str] = Field(None, title="detailed error message")
    error_message: Optional[str] = Field(None, title="summarized error message")

    @staticmethod
    def from_internal_model(run: RunModel):
        return Run(state=run.state.name,
                   ended_utc=run.time_end.isoformat(),
                   traceback=Run.pretty_print_traceback(
                       run.traceback) or "Not available",
                   error_message=run.error_message)

    @staticmethod
    def pretty_print_traceback(traceback: str):

        def find_common_prefix(strings: List[str]):
            res = ''.join(c[0] for c in takewhile(lambda x:
                                                  all(x[0] == y for y in x),
                                                  zip(*strings)))

            return res

        if traceback:
            file_lines = [s.lstrip() for s in traceback.split("\n") if
                          s and s.lstrip().startswith("File")]
            common_prefix_length = len(find_common_prefix(file_lines))
            max_prefix = 48
            if common_prefix_length > max_prefix:
                # shorten them
                traceback_lines = traceback.split("\n")
                pretty_lines = []
                for tb in traceback_lines:
                    line = tb.replace('"', '')  # Drop the noisy quotes
                    if line.lstrip().startswith("File "):
                        file_part = line.split(', ')[0]
                        spec_part = ','.join(line.split(', ')[1:])
                        pretty_lines.append(
                            "File â€¦" + file_part[-max_prefix:] + " " + spec_part)
                    else:
                        pretty_lines.append(line)
                return pretty_lines

        return None
