from typing import List, Optional

from pydantic import BaseModel
from pydantic import Field

from tailor.internal.domain.workflow import WorkflowModel


class WorkflowSummary(BaseModel):
    id: str = Field(None, title="unique ID of the workflow")
    name: str = Field(None, title="non-unique name of the workflow")
    project_ref: str = Field(None, title="project that owns this workflow")
    updated_utc: str = Field(None, title="timestamp of the latest change, "
                                         "in ISO-8601 datetime format")
    state: str = Field(None, title="current aggregated state of the workflow's tasks")

    @staticmethod
    def from_internal_model(wf):
        return WorkflowSummary(id=wf.id,
                               name=wf.name,
                               project_ref=wf.external_references.project_ref,
                               updated_utc=wf.updated_on.isoformat(),
                               state=wf.state.name
                               )


class Workflow(WorkflowSummary):
    user_ref: str = Field(None, title="the user that started this workflow")
    created_utc: str = Field(None, title="timestamp of when the workflow was created,"
                                         " in ISO-8601 datetime format")
    task_links: dict = Field(None, title="links between tasks in the workflow")
    root_tasks: List[int] = Field(None, title="root task(s) of the workflow")
    task_states: dict = Field(None, title="current state of each task")
    file_list: Optional[List[dict]] = Field(None, title="list of input and output "
                                                        "files for the workflow")

    @staticmethod
    def from_internal_model(wf: WorkflowModel, file_list: Optional[List[dict]]):
        return Workflow(id=wf.id,
                        name=wf.name,
                        project_ref=wf.external_references.project_ref,
                        updated_utc=wf.updated_on.isoformat(),
                        created_utc=wf.created_on.isoformat(),
                        state=wf.state.name,
                        user_ref=wf.external_references.user_ref,
                        task_states={k: v.name for k, v in wf.task_states.items()},
                        root_tasks=wf.root_task_ids,
                        task_links=wf.links,
                        file_list=file_list
                        )
