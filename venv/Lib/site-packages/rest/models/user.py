from typing import List, Optional

from pydantic import BaseModel, Field

from tailor.internal.domain.postgres.models import UserDao


class User(BaseModel):
    username: str = Field(None, title="unique username")
    uuid: Optional[str] = Field(None, title="unique identifier")
    name: str = Field(None, title="the user's full name")
    email: str = Field(None, title="the user's email address")
    accounts: List[str] = Field(None,
                                title="the accounts the user has access to, by uuid")
    projects: List[str] = Field(None,
                                title="the projects the user has access to, by uuid")

    @staticmethod
    def from_internal_models(user: UserDao, cognito_data: dict):
        return User(username=user.username,
                    uuid=user.uuid,
                    name='TBD',  # FIXME not part of Cognito user pool yet
                    email=cognito_data['email'] if cognito_data else None,
                    accounts=[a.uuid for a in user.accounts],
                    projects=[p.uuid for p in user.projects]
                    )
