from typing import List, Optional

from pydantic import BaseModel, Field

from tailor.internal.domain.postgres.models import ProjectDao, StorageType


class Project(BaseModel):
    uuid: Optional[str] = Field(None, title="unique identifier")
    name: str = Field(None, title="organization name")
    account_uuid: str = Field(None, title="the project owner account, by uuid")
    storage_type: StorageType = Field(None, title="File storage type")
    storage_identifier: str = Field(None,
                                    title="Name or equivalent within the given storage_type")
    external_reference: Optional[str] = Field(None,
                                              title="a reference number or code this "
                                                    "project uses in other systems")
    users: Optional[List[str]] = Field(None,
                                       title="the users who are a member of this account, by uuid")

    @staticmethod
    def from_internal_model(p: ProjectDao):
        return Project(uuid=p.uuid,
                       name=p.name,
                       storage_type=p.storage_type,
                       storage_identifier=p.storage_identifier,
                       account_uuid=p.account.uuid,
                       external_reference=p.external_reference,
                       users=[u.uuid for u in p.users]
                       )
