from typing import List, Optional

from pydantic import BaseModel, Field

from rest.models import Account, Project
from tailor.internal.domain.postgres.models import UserDao


class UserProfile(BaseModel):
    username: str = Field(None, title="unique username")
    uuid: str = Field(None, title="unique identifier")
    name: str = Field(None, title="the user's full name")
    email: str = Field(None, title="the user's email address")
    accounts: Optional[List[Account]] = Field(default=None,
                                              title="the accounts the user has access to",
                                              )
    projects: Optional[List[Project]] = Field(default=None,
                                              title="the projects the user has access to",
                                              )

    @staticmethod
    def from_internal_models(user: UserDao, cognito_data: dict):
        return UserProfile(username=user.username,
                           uuid=user.uuid,
                           name='TBD',  # FIXME not part of Cognito user pool yet
                           email=cognito_data['email'] if cognito_data else None,
                           accounts=[Account.from_internal_model(a) for a in
                                     user.accounts],
                           projects=[Project.from_internal_model(p) for p in
                                     user.projects]
                           )
