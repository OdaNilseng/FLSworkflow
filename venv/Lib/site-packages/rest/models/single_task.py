from typing import List, Optional

from pydantic import BaseModel, Field

from rest.models.run import Run
from tailor.internal.domain.run import RunModel
from tailor.internal.domain.single_task import SingleTaskModel


class SingleTaskSummary(BaseModel):
    id: str = Field(None, title="unique identifier of the task")
    name: str = Field(None, title="non-unique name of the task")
    updated_utc: str = Field(None, title="timestamp of the latest change, "
                                         "in ISO-8601 datetime format")
    state: str = Field(None, title="current state of the task")

    @staticmethod
    def from_internal_model(task: SingleTaskModel):
        return SingleTaskSummary(id=task.id,
                                 name=task.task_def['name'],
                                 updated_utc=task.updated_on.isoformat(),
                                 state=task.state.name
                                 )


class SingleTask(SingleTaskSummary):
    created_utc: str = Field(None, title="timestamp of when the task was created, "
                                         "in ISO-8601 datetime format")
    runs: Optional[List[Run]] = Field(None, title="list of results from running "
                                                  "this task")
    definition: dict = Field(None, title="definition of the task")

    @staticmethod
    def from_internal_model(task: SingleTaskModel, runs: List[RunModel]):
        return SingleTask(id=task.id,
                          name=task.task_def['name'],
                          updated_utc=task.updated_on.isoformat(),
                          state=task.state.name,
                          created_utc=task.created_on.isoformat(),
                          definition=task.task_def,
                          runs=[Run.from_internal_model(r) for r in runs]
                          )
