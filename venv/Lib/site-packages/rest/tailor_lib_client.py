from typing import List

from rest.models import Workflow, WorkflowSummary
from rest.models.account import Account
from rest.models.project import Project
from rest.models.single_task import SingleTask, SingleTaskSummary
from rest.models.user import User
from rest.models.user_profile import UserProfile
from tailor.internal.domain.workflow import WorkflowModel
from tailor.internal.service import WorkflowService, SingleTaskService, ContextService, \
    StorageService, RunService
from tailor.internal.service.account_service import AccountService
from tailor.internal.service.cognito_service import CognitoService
from tailor.internal.service.project_service import ProjectService
from tailor.internal.service.user_service import UserService


class TailorLibClient:
    item_limit = 250

    def __init__(self, project_name):
        self.project_name = project_name
        self.workflow_service = WorkflowService(project_name)
        self.task_service = SingleTaskService(project_name)
        self.run_service = RunService(project_name)
        self.context_service = ContextService(project_name)
        self.storage_service = StorageService(project_name)
        self.cognito_service = CognitoService()
        self.user_service = UserService()
        self.account_service = AccountService()
        self.project_service = ProjectService()

    def map_wf_to_local_summary_model(self, wf: WorkflowModel) -> WorkflowSummary:
        return WorkflowSummary.from_internal_model(wf)

    def find_tasks_by_workflow(self, wf_id: str, allowed_projects: List[str]) -> \
            List[SingleTaskSummary]:
        task_list = self.task_service.find_by_workflow_id(wf_id, allowed_projects)

        return {t.id: self.map_task_to_local_summary_model(t) for t in task_list}

    def map_task_to_local_summary_model(self, t):
        return SingleTaskSummary.from_internal_model(t)

    def find_workflows(self, allowed_projects: List[str], query: str = None,
                       limit: int = item_limit) -> List[WorkflowSummary]:
        workflow_list = self.workflow_service.find_all(query, limit, allowed_projects)
        wf_data = [self.map_wf_to_local_summary_model(wf) for wf in workflow_list]

        return wf_data

    def find_workflow_by_id(self, wf_id: str, allowed_projects: List[str]) -> Workflow:
        wf_data = self.workflow_service.find_by_id(wf_id, allowed_projects)
        output = None
        if wf_data:
            file_list = self.find_workflow_files(wf_data)
            output = Workflow.from_internal_model(wf_data, file_list)

        return output

    def find_task_by_id(self, task_id: str, allowed_projects: List[str]) -> SingleTask:
        db_task = self.task_service.find_by_id(task_id, allowed_projects)
        runs = self.run_service.find_by_task_id(task_id, allowed_projects)
        return SingleTask.from_internal_model(db_task, runs)

    def find_workflow_files(self, wf_data: WorkflowModel) -> dict:
        context_id = wf_data.context_id
        context_data = self.context_service.find_by_id(context_id)
        storage_key = context_data.storage_key
        return self.storage_service.get_detailed_file_list(storage_key)

    def find_user_by_username(self, username: str) -> UserProfile:
        cognito_data = self.cognito_service.get_user_contact_information(username)
        user = self.user_service.find_by_username(username)
        if not user or not cognito_data:
            return None
        return UserProfile.from_internal_models(user, cognito_data)

    def find_accounts(self) -> List[Account]:
        accounts = self.account_service.find_all()
        result = [Account.from_internal_model(a) for a in accounts]
        return result

    def find_account(self, account_uuid: str) -> Account:
        account = self.account_service.find_by_uuid(account_uuid)
        result = Account.from_internal_model(account)
        return result

    def create_account(self, account: Account) -> Account:
        dao = self.account_service.create(account.organization_name,
                                          account.organization_id)
        result = Account.from_internal_model(dao)
        return result

    def find_projects(self) -> List[Project]:
        projects = self.project_service.find_all()
        result = [Project.from_internal_model(a) for a in projects]
        return result

    def find_project(self, project_uuid: str) -> Project:
        project = self.project_service.find_by_uuid(project_uuid)
        result = Project.from_internal_model(project)
        return result

    def create_project(self, project: Project) -> Project:
        account = self.account_service.find_by_uuid(project.account_uuid)
        projectDao = self.project_service.create(project.name,
                                                 project.storage_type,
                                                 project.storage_identifier,
                                                 account)

        return Project.from_internal_model(projectDao)

    def find_users(self) -> List[User]:
        users = self.user_service.find_all()
        result = [User.from_internal_models(a, None) for a in users]
        return result

    def find_user(self, username: str) -> User:
        user = self.user_service.find_by_username(username)
        result = User.from_internal_models(user, None)
        return result

    def create_user(self, user: User) -> User:
        accounts = []
        if user.accounts:
            for uuid in user.accounts:
                a = self.account_service.find_by_uuid(uuid)
                if a:
                    accounts.append(a)
        projects = []
        if user.projects:
            for uuid in user.projects:
                p = self.project_service.find_by_uuid(uuid)
                if p:
                    projects.append(p)

        userDao = self.user_service.create(username=user.username,
                                           accounts=accounts,
                                           projects=projects)

        return User.from_internal_models(userDao, None)

    def find_workflows_for_user(self, user_uuid: str, limit=item_limit) -> List[
        Workflow]:
        workflow_list = self.workflow_service.find_by_user(user_uuid, limit)
        wf_data = [self.map_wf_to_local_summary_model(wf) for wf in workflow_list]
        return wf_data
