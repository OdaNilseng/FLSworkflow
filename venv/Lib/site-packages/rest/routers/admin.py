from typing import List

from fastapi import APIRouter, HTTPException
from starlette.status import HTTP_400_BAD_REQUEST

from rest.models import Account, Project
from rest.models.user import User
from rest.tailor_lib_client import TailorLibClient
from tailor.internal.utils import get_default_project

router = APIRouter()

project_name = get_default_project()
tailor_lib = TailorLibClient(project_name)


@router.get("/accounts",
            summary="Lists all accounts",
            response_model=List[Account]
            )
async def account_list() -> List[Account]:
    return tailor_lib.find_accounts()


@router.get("/accounts/{account_uuid}",
            summary="Information about a specific account",
            response_model=Account
            )
async def account_list(account_uuid: str) -> Account:
    return tailor_lib.find_account(account_uuid)

@router.post("/accounts",
             summary="Create a new account",
             response_model=Account)
async def create_account(account: Account) -> Account:
    required_fields = ['organization_name',
                       'organization_id']
    verify_required_fields_present(required_fields, account)

    return tailor_lib.create_account(account)


@router.get("/projects",
            summary="Lists all projects",
            response_model=List[Project])
async def account_list() -> List[Project]:
    return tailor_lib.find_projects()


@router.get("/projects/{project_uuid}",
            summary="Information about a specific project",
            response_model=Project
            )
async def project_list(project_uuid: str) -> Project:
    return tailor_lib.find_project(project_uuid)


@router.post("/projects",
             summary="Create a new project",
             response_model=Project)
async def create_project(project: Project) -> Project:
    required_fields = ['storage_identifier',
                       'storage_type',
                       'account_uuid',
                       'name']
    verify_required_fields_present(required_fields, project)

    return tailor_lib.create_project(project)


@router.get("/users",
            summary="Lists all users",
            response_model=List[User])
async def user_list() -> List[User]:
    return tailor_lib.find_users()


@router.get("/users/{username}",
            summary="Information about a specific user",
            response_model=User
            )
async def user_list(username: str) -> User:
    return tailor_lib.find_user(username)


@router.post("/users",
             summary="Create a new user",
             response_model=User)
async def create_user(user: User) -> User:
    verify_required_fields_present(['username'], user)

    return tailor_lib.create_user(user)


def verify_required_fields_present(required_fields, supplied_body):
    for field in required_fields:
        if not supplied_body.__dict__[field]:
            raise HTTPException(status_code=HTTP_400_BAD_REQUEST,
                                detail=f"Required field '{field}' is missing")
