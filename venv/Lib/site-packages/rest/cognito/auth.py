import requests
from fastapi import Depends, HTTPException
from starlette.status import HTTP_403_FORBIDDEN

from rest.cognito.JWTBearer import JWKS, JWTBearer, JWTAuthorizationCredentials
from rest.cognito.authorizations import Authorizations
from rest.cognito.cognito_settings import CognitoSettings
from tailor.internal.service.user_service import UserService

cognito_settings = CognitoSettings()

print("Downloading JWT public keys from AWS into memory")
jwks = JWKS.parse_obj(
    requests.get(f"{cognito_settings.idp_url}/.well-known/jwks.json").json()
)

authenticated = JWTBearer(jwks)


async def get_current_user(
        credentials: JWTAuthorizationCredentials = Depends(authenticated)
) -> str:
    try:
        return credentials.claims["username"]
    except KeyError:
        raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail="Username missing")


async def authenticated_admin(
        credentials: JWTAuthorizationCredentials = Depends(authenticated)
):
    group_key = "cognito:groups"
    groups_exist = group_key in credentials.claims
    admin_group_present = "developers" in credentials.claims[group_key]
    if not groups_exist or not admin_group_present:
        raise HTTPException(status_code=HTTP_403_FORBIDDEN,
                            detail="Insufficient permissions")


async def get_authorizations(
        credentials: JWTAuthorizationCredentials = Depends(authenticated)
) -> Authorizations:
    try:
        username = credentials.claims["username"]
        user = UserService().find_by_username(username)
        projects = [p.uuid for p in user.projects]
        return Authorizations(projects, user.uuid)
    except KeyError:
        raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail="Username missing")
