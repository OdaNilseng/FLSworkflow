# -*- coding: utf-8 -*-
from typing import Sequence, Union, Optional, List

from tailor.api.definition import TaskDefinition
from tailor.internal.service import WorkflowService
from .workflow import Workflow
from .workflow_run import WorkflowRun

from tailor.internal.utils import get_default_project


class Project:
    """
    A Project manages workflows related to a single project.

    A project is configured with its own backend database and storage resource.
    Projects must be defined in the tailor config file located in
    <userdir>/.tailor/config.yaml.

    Parameters
    ----------
    project_name : str
        Must be a valid project name as defined in the tailor config file.

    """

    def __init__(self, project_name: Optional[str] = None):
        self.project_name = project_name or get_default_project()
        self.workflow_service: WorkflowService = WorkflowService(project_name)

    def new_workflow(self, task_def: Optional[TaskDefinition] = None,
                     name: Optional[str] = None, inputs: Optional[dict] = None,
                     files: Optional[dict] = None, worker: Optional[str] = None,
                     mode: Optional[str] = None) -> Workflow:

        return Workflow(self.project_name, task_def, name, inputs, files, worker, mode)

    def find_workflow_by_id(self, workflow_id: int) -> WorkflowRun:
        """
        Retrieve a workflow run from the database.

        Parameters
        ----------
        workflow_id : int
            Unique id for the workflow.

        Returns
        -------
        WorkflowRun
            Returns a WorkflowRun object.

        """
        return WorkflowRun(self.project_name, workflow_id)
