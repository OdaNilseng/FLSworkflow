# -*- coding: utf-8 -*-
from typing import List

from tailor.internal.service import WorkflowService, StorageService, ContextService, \
    SingleTaskService
from tailor.internal.domain.single_task import SingleTaskState
from tailor.internal.utils import get_default_project


class WorkflowRun:
    """
    A WorkflowRun represents a workflow from its execution phase.


    Parameters
    ----------
    project_name : str
        The project from which to retrieve the workflow data.
    wf_id : int
        Unique id for the workflow.

    """

    def __init__(self,
                 project_name: str,
                 wf_id: int
                 ):
        self.project_name = project_name or get_default_project()
        self.id = wf_id
        self.__workflow_service = WorkflowService(self.project_name)
        self.__storage_service = StorageService(self.project_name)
        self.__context_service = ContextService(self.project_name)
        self.__single_task_service = SingleTaskService(self.project_name)

        # load model and assert workflow exists
        wf_model = self.__workflow_service.find_by_id(self.id)
        if wf_model is None:
            # raise something
            pass

        # store som attributes from wf_model
        self.context_id = wf_model.context_id

        # get some attributes from context model
        context_model = self.__context_service.find_by_id(self.context_id)
        self.storage_key = context_model.storage_key

    def __str__(self):
        wf_model = self.__workflow_service.find_by_id(self.id)
        return self.__workflow_service.pretty_print(wf_model)

    # def download(self,
    #              fname_or_tag: Union[str, Sequence[str]]
    #              ) -> Union[str, List[str]]:
    #     pass

    @property
    def state(self) -> str:
        wf_model = self.__workflow_service.find_by_id(self.id)
        return wf_model.state.name

    @property
    def inputs(self) -> dict:
        context_model = self.__context_service.find_by_id(self.context_id)
        return context_model.inputs

    @property
    def outputs(self) -> dict:
        context_model = self.__context_service.find_by_id(self.context_id)
        return context_model.outputs

    def get_file_list(self) -> List[str]:
        return self.__storage_service.get_file_list(self.storage_key)

    def reset_task(self, task_id: int) -> None:
        self.__single_task_service.reset_task(task_id)
        self.__workflow_service.refresh(task_id)
        # above is not safe: the task may be uncorrectly checked out before refresh
        # is finished. refresh may change state from READY to WAITING, depending on state
        # of parent tasks.

        # TODO: move reset_task method to WorkflowService

        # a safe pattern:
        # workflow = self.__workflow_service.find_by_task_id(task_id)
        # workflow.task_states[task_id] = SingleTaskState.READY
