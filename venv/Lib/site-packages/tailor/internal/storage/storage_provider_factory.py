from typing import Optional

from tailor.internal.utils import get_project_data, Singleton
from tailor.exceptions import ProjectError
from .storage_provider import StorageProvider
from .filesystem_storage_provider import FileSystemStorageProvider
from .s3_storage_provider import S3StorageProvider
from .azure_storage_provider import BlobStorageProvider


@Singleton
class StorageProviderFactory:
    storage_providers = {}

    def create(self, project_name: Optional[str] = None) -> StorageProvider:
        """
        Get a storage provider.

        Parameters
        ----------
        project_name : Optional[str]
            Provide a project name. If not provided, DEFAULT_PROJECT from tailor
            configuration is used.

        Raises
        ------
        ValueError
            If *project* is not specified and DEFAULT_PROJECT is not found in tailor
            configuration.
        ProjectError
            If no or insufficient storage info for *project*.

        Returns
        -------
        StorageProvider
        """
        prj_data = get_project_data(project_name)

        try:
            storage_data = prj_data['storage'].copy()
            storage_type = storage_data.pop('type')

            if storage_type == 'FileSystem':
                key = (storage_type, storage_data['path'])
                if key in self.storage_providers:
                    return self.storage_providers[key]
                else:
                    provider = FileSystemStorageProvider(storage_data['path'])
                    self.storage_providers[key] = provider
                    return provider
            elif storage_type == 'S3':
                key = (storage_type, storage_data['bucket_name'])
                if key in self.storage_providers:
                    return self.storage_providers[key]
                else:
                    provider = S3StorageProvider(storage_data['bucket_name'])
                    self.storage_providers[key] = provider
                    return provider
            elif storage_type == 'AzureBlob':
                key = (storage_type, storage_data['container_name'])
                if key in self.storage_providers:
                    return self.storage_providers[key]
                else:
                    provider = BlobStorageProvider(storage_data['container_name'])
                    self.storage_providers[key] = provider
                    return provider
            else:
                raise ValueError(f"Unknown storage type specified, {storage_type}")

        except Exception as e:
            raise ProjectError(f'Invalid storage info for project "{project_name}"', e)

    # def __del__(self):
    #     for provider in self.storage_providers.values():
    #         try:
    #             provider.close()
    #         finally:
    #             pass
