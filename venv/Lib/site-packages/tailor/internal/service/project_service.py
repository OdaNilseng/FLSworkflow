# -*- coding: utf-8 -*-
import uuid
from typing import List

from tailor.internal.domain.postgres.models import ProjectDao, StorageType, \
    WorkflowDbType, UserDao, TaskDefinitionDao, AccountDao
from tailor.internal.domain.project.project_repository import ProjectRepository


class ProjectService:
    def __init__(self):
        self.repository: ProjectRepository = ProjectRepository()

    def insert(self, entity: ProjectDao) -> ProjectDao:
        return self.repository.insert(entity)

    def find_by_id(self, entity_id) -> ProjectDao:
        return self.repository.find_by_id(entity_id)

    def find_by_name(self, name: str) -> ProjectDao:
        return self.repository.find_by_name(name)

    def create(self, name: str, storage_type: StorageType, storage_identifier: str,
               account: AccountDao) -> ProjectDao:
        project = ProjectDao(name=name,
                             storage_type=storage_type,
                             storage_identifier=storage_identifier,
                             account_id=account.id,
                             uuid=str(uuid.uuid4())
                             )
        return self.insert(project)

    def add_user(self, project: ProjectDao, user: UserDao):
        return self.add_users(project, [user])

    def add_users(self, project: ProjectDao, users: List[UserDao]):
        if project.users is None:
            project.users = []
        return project.users.extend(users)

    def add_workflow_definition(self, project: ProjectDao,
                                wf_def: TaskDefinitionDao):
        if project.task_definitions is None:
            project.task_definitions = []
        return project.task_definitions.extend(wf_def)

    def find_all(self) -> List[ProjectDao]:
        return self.repository.find_all()

    def find_by_uuid(self, uuid: str) -> ProjectDao:
        return self.repository.find_by_uuid(uuid)
