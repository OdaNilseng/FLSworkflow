# -*- coding: utf-8 -*-
from typing import Optional, List, Union, Sequence

from tailor.internal.storage.storage_provider import StorageProvider
from tailor.internal.storage.storage_provider_factory import StorageProviderFactory


class StorageService:
    def __init__(self, project: str):
        self.provider: StorageProvider = StorageProviderFactory.Instance().create(
            project)

    def new_storage_key(self) -> str:
        """
        Create a new storage key.

        Returns
        -------
        str
            A Unique identifier for a file storage location.
        """
        return self.provider.new_storage_key()

    def get_tags(self, storage_key: str) -> dict:
        """Get tag/filename(s) mapping."""
        return self.provider.get_tags(storage_key)

    def get_file_list(self, storage_key: str, name_filter: str = '*') -> List[str]:
        """
        Get file names stored in this storage key.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        name_filter : str, optional
            Provide a glob-style filter. The default is '*'.

        Returns
        -------
        List[str]
            File names will include any path prefixes. An empty list is returned
            if no files match ´name_filter´
        """
        return self.provider.get_file_list(storage_key, name_filter)

    def get_detailed_file_list(self, storage_key: str, name_filter: str = '*') -> List[dict]:
        """
        Get files stored in this storage key, with details as name and download url.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        name_filter : str, optional
            Provide a glob-style filter. The default is '*'.

        Returns
        -------
        List[dict(file_name:str, url:str)]
            File names will include any path prefixes. An empty list is returned
            if no files match ´name_filter´
        """
        return self.provider.get_detailed_file_list(storage_key, name_filter)

    def get_scoped_file_list(self, storage_key: str, tag: str,
                             scope_indices: List[int]) -> List[str]:
        """
        Get list of filenames stored under *tag* as "seen" from *scope_indices*.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        tag : str
            File tag.
        scope_indices : Optional[List[int]], optional
            List of indices representing a scope. E.g. the scope of a
            duplicated task in a duplication hierarchy. I.e. only the files that
            are "seen" from the position of the duplicated task are downloaded.

        Returns
        -------
        List[str]
            File names "seen" under the given *tag* from the scope of a duplicated task.
        """
        return self.provider.get_scoped_file_list(storage_key, tag, scope_indices)

    def get_prefixed_file_list(self,
                               storage_key: str,
                               tag: str,
                               scope_indices: Optional[List] = None) -> List[str]:

        return self.provider.get_prefixed_file_list(storage_key, tag, scope_indices)

    def upload(
            self,
            storage_key: str,
            filename: Union[str, Sequence[str]],
            path_prefix: str = '',
            tag: Optional[str] = None,
            scope_indices: Optional[List[int]] = None
    ) -> List[str]:
        """
        Upload file(s) to this storage resource.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        filename : Union[str, Sequence[str]]
            File(s) to upload.
        path_prefix : str, optional
            The file will be stored with a path prefix. The default is ''.
        tag : str, optional
            Provide a tag to the file(s) for easy referencing. Mandatory if
            *scope_indices* are specified.
        scope_indices : Optional[List[int]], optional
            List of indices representing a scope. E.g. the scope of a
            duplicated task in a duplication hierarchy. I.e. only the files that
            are "seen" from the position of the duplicated task are downloaded.

        Returns
        -------
        Union[str, List[str]]
            Returns the uploaded file name(s) including path prefix.

        """
        if scope_indices:
            return self.provider.upload_scoped(
                storage_key, filename, tag, scope_indices, path_prefix)
        else:
            return self.provider.upload(storage_key, filename, path_prefix, tag)

    def download(
            self,
            storage_key: str,
            fname_or_tag: Union[str, Sequence[str]],
            target_dir: str = '.',
            scope_indices: Optional[List[int]] = None
    ) -> List[str]:
        """
        Download file(s) from this storage resource.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        fname_or_tag : Union[str, Sequence[str]]
            File name or tag. file name(s) must include path prefixes
        target_dir : str, optional
            Local target directory. The default is '.'.
        scope_indices : Optional[List[int]], optional
            List of indices representing a scope. E.g. the scope of a
            duplicated task in a duplication hierarchy. I.e. only the files that
            are "seen" from the position of the duplicated task are downloaded.

        Returns
        -------
        Union[str, List[str]]
            Returns the full local path(s) to downloaded file(s).
        """
        if scope_indices:
            return self.provider.download_scoped(
                storage_key, fname_or_tag, scope_indices, target_dir)
        else:
            return self.provider.download(
                storage_key, fname_or_tag, target_dir)

    def delete_all(self, storage_key: str) -> None:
        """
        Delete all files stored under this storage resource.

        Parameters
        ----------
        storage_key : str
            Unique identifier for a file storage location.
        """
        return self.provider.delete_all(storage_key)
