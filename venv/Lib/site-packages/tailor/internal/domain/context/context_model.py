# -*- coding: utf-8 -*-
from tailor.internal.domain.mongo import BaseModel


class ContextModel(BaseModel):

    def __init__(self, context_id, inputs: dict = None, outputs: dict = None,
                 storage_key: str = None,
                 output_dict_ids=None):
        self.id = context_id
        self.inputs = inputs
        self.outputs = outputs or {}
        self.storage_key = storage_key
        self.output_dict_ids = output_dict_ids or []

    def to_dict(self):
        return {
            'id': self.id,
            'inputs': self.inputs,
            'outputs': self.dict_keys_int_to_str(self.outputs),
            'storage_key': self.storage_key,
            'output_dict_ids': self.output_dict_ids
        }

    @classmethod
    def from_dict(cls, d: dict):
        return ContextModel(
            context_id=d['id'],
            inputs=d['inputs'],
            outputs=BaseModel.dict_keys_str_to_int(d['outputs']),
            storage_key=d['storage_key'],
            output_dict_ids=d['output_dict_ids']
        )
