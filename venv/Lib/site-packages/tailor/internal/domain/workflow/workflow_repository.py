# -*- coding: utf-8 -*-
from typing import List, Optional

from pymongo import DESCENDING
from pymongo.results import InsertOneResult, DeleteResult

from tailor.exceptions import DatabaseError
from tailor.internal.domain.mongo import BaseRepository
from tailor.internal.domain.mongo import DocumentLock
from . import WorkflowModel


class WorkflowRepository(BaseRepository):
    def __init__(self, project: str):
        super().__init__(project)
        self._workflows = self._client.workflows

    def insert(self, wf: WorkflowModel):
        result: InsertOneResult = self._workflows.insert_one(wf.to_dict())
        if not result.acknowledged:
            raise DatabaseError("Could not insert new Workflow into db")

    def insert_many(self, runs: List[WorkflowModel]):
        dicts = [dbt.to_dict() for dbt in runs]
        result = self._workflows.insert_many(dicts)
        if not result.acknowledged:
            raise DatabaseError("Could not insert new Workflows into db")

    def replace(self, wf: WorkflowModel, preserve_lock=False) -> dict:
        wf_dict = wf.to_dict()
        if preserve_lock:
            wf_dict['locked'] = True
        return self._workflows.find_one_and_replace({'id': wf.id}, wf_dict)

    def find_by_id(self, wf_id) -> dict:
        if isinstance(wf_id, WorkflowModel):
            wf_id = wf_id.id
        wf_dict = self._workflows.find_one({'id': wf_id})
        return wf_dict

    def find_by_user(self, user_uuid: str, limit: int):
        result = self._workflows.find({'external_references.user_ref': user_uuid})
        if result:
            return result.limit(limit).sort([('created_on', DESCENDING)])
        else:
            return []

    def delete_by_id(self, wf_id) -> dict:
        result: DeleteResult = self._workflows.delete_one({'id': wf_id})
        if not result.acknowledged:
            raise DatabaseError(f"Could not delete Workflow id {wf_id} db")
        return result

    def find_all(self, query: Optional[str], limit):
        if query:
            result = self._workflows.find(
                {'name': {'$regex': query, '$options': 'i'}})
        else:
            result = self._workflows.find()
        return result.limit(limit).sort([('created_on', DESCENDING)])

    def find_all_names(self, query: Optional[str]) -> List[str]:
        if query:
            return self._workflows.distinct(
                'name',
                {'name': {'$regex': query, '$options': 'i'}})
        else:
            return self._workflows.distinct('name')

    def lock_manager(self, wf_id):
        return DocumentLock(self._workflows, wf_id)
