from pymongo import MongoClient

from tailor.internal.domain.mongo.dbfactory import DbFactory


class BaseRepository:

    def __init__(self, project: str = None):
        self._client = self.__create_mongo_database_client(project)
        self.__id_counters = self._client.id_counters
        self.__init_counters_if_necessary()

    def __init_counters_if_necessary(self):
        # counters has a document for each counter
        # make sure counters has documents for each counter type
        for id_type in ['workflow', 'task', 'run', 'context']:
            if not self.__id_counters.find_one({'id_type': {'$eq': id_type}}):
                self.__id_counters.insert_one({'id_type': id_type, 'next_id': 1})

    def _get_new_id(self, id_type: str, quantity: int = 1) -> int:
        """
        Get a new unique integer id.

        Parameters
        ----------
        id_type : str
            "workflow", "task" or "run".
        quantity : int, optional
            Number of ids to reserve. The default is 1.

        Returns
        -------
        new_id : int
            Returns an int *new_id* for *id_type* and increments the next
            available id with *quantity*. The caller then has *quantity*
            available id's starting from *new_id*.
        """
        new_id = self.__id_counters.find_one_and_update(
            {'id_type': id_type}, {
                '$inc': {'next_id': quantity}})['next_id']
        return new_id

    def __create_mongo_database_client(self, project_name: str = None) -> MongoClient:
        factory = DbFactory.Instance()

        return factory.create(project_name)
