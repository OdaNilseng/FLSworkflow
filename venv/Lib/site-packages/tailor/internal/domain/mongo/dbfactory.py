# -*- coding: utf-8 -*-

from typing import Optional

from pymongo import MongoClient

from tailor.internal.utils import get_project_data, Singleton
from tailor.exceptions import ProjectError


@Singleton
class DbFactory:
    mongo_clients = {}

    def create(self, project_name: Optional[str] = None):
        """
        Get a database object.

        Parameters
        ----------
        project_name : Optional[str]
            Provide a project name. If not provided, DEFAULT_PROJECT from tailor
            configuration is used.

        Raises
        ------
        ValueError
            If *project* is not specified and DEFAULT_PROJECT is not found in tailor
            configuration.
        ProjectError
            If no or insufficient database info for *project*.

        Returns
        -------
        BaseDatabase
            Returns a subclass of tailor.internal.domain.base.BaseDatabase.
        """

        prj_data = get_project_data(project_name)

        try:
            db_data = prj_data['database'].copy()
            db_type = db_data.pop('type')

            if db_type != "MongoDB":
                raise ValueError(f"Unknown database type specified, {db_type}")

            db_uri = db_data["uri"]
            # Avoid creating the same client multiple times
            if db_uri in self.mongo_clients:
                client = self.mongo_clients[db_uri]
            else:
                client = MongoClient(db_uri)
                self.mongo_clients[db_uri] = client

            db_name = db_uri.split('/')[-1].split('?')[0]  # parse URI to extract dbname

            return client[db_name]
        except Exception as e:
            raise ProjectError(f'Invalid database info for project "{project_name}"', e)

    def __del__(self):
        for client in self.mongo_clients.values():
            try:
                client.close()
            finally:
                pass
