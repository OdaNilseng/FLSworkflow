from abc import ABC
from collections import Mapping

from tailor.internal.bases import Serializable
from tailor.internal.utils import walk_and_apply


class BaseModel(Serializable, ABC):

    def __eq__(self, other):
        if isinstance(other, self.__class__):
            return self.__dict__ == other.__dict__
        else:
            return False

    def __hash__(self):
        return hash(tuple(sorted(self.__dict__.items())))

    @staticmethod
    def dict_keys_int_to_str(d):
        """
        Get a copy of *d* where integer keys are replace with string representation
        of the same key.
        """
        key_cond = lambda k: isinstance(k, int)
        key_apply = lambda k: str(k)
        return walk_and_apply(d, key_cond, key_apply)

    @staticmethod
    def dict_keys_str_to_int(d):
        """
        Get a copy of *d* where string represented integer keys are converted to
        integers.
        """
        key_cond = lambda k: isinstance(k, str) and k.isdigit()
        key_apply = lambda k: int(k)
        return walk_and_apply(d, key_cond, key_apply)

    @staticmethod
    def update_nested_dict(d, u):
        for k, v in u.items():
            if isinstance(v, Mapping):
                d[k] = BaseModel.update_nested_dict(d.get(k, {}), v)
            else:
                d[k] = v
        return d
