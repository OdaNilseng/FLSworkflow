import os

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, Session

from tailor.config import config
from tailor.internal.domain.postgres import AlchemyBase
from tailor.internal.utils import Singleton


@Singleton
class SessionFactory:
    def __init__(self):
        # an Engine, which the Session will use for connection
        # resources
        db_url = config['admin_db_uri']
        debug_sql = os.environ.get("DEBUG_SQL") == "true"
        if debug_sql:
            print("Creating admin db at", db_url)
        engine = create_engine(db_url, echo=debug_sql)

        AlchemyBase.metadata.create_all(engine)

        # create a configured "Session" class
        self.session_maker = sessionmaker(bind=engine)
        self.session = self.__create_new()

    def create(self) -> Session:
        return self.session

    def __create_new(self) -> Session:
        # create a new Session
        created: Session = self.session_maker()
        created.autocommit = True
        return created
