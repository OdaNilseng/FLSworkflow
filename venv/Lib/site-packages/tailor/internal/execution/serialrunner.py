# -*- coding: utf-8 -*-


import uuid
from typing import Optional

from tailor.api.definition import TaskDefinition
from tailor.internal.domain.workflow.workflow_model import ExternalReferencesModel
from tailor.internal.execution.taskrunner import run_task
from tailor.internal.service import SingleTaskService, WorkflowService
from tailor.internal.utils import get_logger


class SerialRunner:

    def __init__(self, project_name: str = None):
        self.project_name = project_name
        self.task_service: SingleTaskService = SingleTaskService(project_name)
        self.workflow_service: WorkflowService = WorkflowService(project_name)

    def run_workflow(self, wf_def: TaskDefinition,
                     name: Optional[str] = None,
                     inputs: dict = None,
                     storage_key: Optional[str] = None) -> int:
        """
        Local, one task at a time execution (for dev/debug)

        Parameters
        ----------
        wf_def : TaskDefinition
            Workflow definition.
        name : str, optional
            Provide a name for this workflow run.
        inputs : dict
            input data which can be queried from tasks during workflow execution.
            the data must be JSON/BSON serializable.
        storage_key : BaseFileStore, optional
            Provide a storage object. The storage object must include all files that
            are referenced (through file tags) in the workflow definition. This
            storage object becomes the associated storage object for this particular
            workflow run.

        Returns
        -------
        wf_id : int
            The unique id for this workflow run.
        """

        logger = get_logger('SerialRunner')

        # Inputs are immutable by design.
        # Make sure the *inputs* instance is not mutated later,
        # by taking a deep copy of the provided inputs, instead of passing on the instance the user provided.
        inputs_copy = inputs.copy() if inputs else None

        # create a unique worker name to ensure that the job is not pulled by
        # other workers (only relevant for a shared database)
        worker_id = str(uuid.uuid4())

        # add the workflow to the database
        wf = self.workflow_service.create(wf_def,
                                          ExternalReferencesModel.create_from_config_file(
                                              self.project_name),
                                          name,
                                          inputs_copy,
                                          storage_key,
                                          worker_id)

        logger.info(f'Starting workflow with id {wf.id}')

        # pull and run tasks
        task = self.task_service.checkout_ready_task(worker=worker_id, wf_id=wf.id)
        while task:
            run_task(self.project_name, task)
            task = self.task_service.checkout_ready_task(worker=worker_id,
                                                         wf_id=wf.id)

        logger.info(f'Workflow with id {wf.id} finished')
        return wf.id
